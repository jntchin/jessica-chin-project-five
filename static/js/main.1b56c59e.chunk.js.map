{"version":3,"sources":["GrammarForm.js","ResetButton.js","RemovableDiv.js","App.js","serviceWorker.js","index.js"],"names":["GrammarForm","className","action","label","rows","onChange","this","props","handleChange","value","inputField","aria-label","onClick","handleSubmit","disabled","charsLeft","type","React","Component","ResetButton","handleReset","RemovableDiv","characterCountMessage","edits","length","savedInput","wrongWord","map","word","index","key","errorMessages","message","App","checkMyGrammar","axios","method","url","dataResponse","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","queryParam","state","userInput","format","text","language","proxyHeaders","xmlToJSON","then","results","setState","data","matches","misspelling","slice","context","offset","newEditState","event","charLeft","target","preventDefault","reset","wrongWords","run","onButtonClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b56c59e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class GrammarForm extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"form\">\r\n                <form action=\"\" label=\"grammarForm\">\r\n                    <textarea\r\n                        rows=\"4\"\r\n                        onChange={this.props.handleChange}\r\n                        value={this.props.inputField}\r\n                        label=\"text\"\r\n                        aria-label=\"enter your sentence here\"\r\n                    >\r\n                    </textarea>\r\n                    <button onClick={this.props.handleSubmit} disabled={this.props.charsLeft > 49975 ? \"disabled\" : null}  type=\"submit\">Check my grammar!</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ResetButton extends React.Component {\r\n    render(){\r\n        return(\r\n    <button onClick={this.props.handleReset} className=\"resetButton\" type=\"submit\">Check a new sentence!</button>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class RemovableDiv extends React.Component {\r\n\r\n    characterCountMessage = () => {\r\n        //if the number of characters left is 50,000 return \"go ahead and write something\", don't print anything\r\n      if (this.props.charsLeft === 50000) {\r\n        return null\r\n      //if the number of characters left is 49,975-49,999 print \"must be at least 25 characters\"\r\n      } else if (this.props.charsLeft <= 49999 && this.props.charsLeft > 49975){\r\n        return 'Must be at least 25 characters'\r\n        //if the number of characters left is 49,974 or less, don't print an error message\r\n      } else if (this.props.charsLeft <= 49975){\r\n        return null \r\n        //if the number of characters left is 0, write limit of 50,000 characters, don't render userInput\r\n      } else if (this.props.charsLeft === 0){\r\n        return (`You've hit the character limit!`)\r\n      }\r\n    }\r\n\r\n    render(){\r\n        if (this.props.edits.length > 0){\r\n            return(\r\n                <div className=\"errors\"> \r\n                    {/* display the user's submitted sentence on the page */}\r\n                    <div className=\"userInput\">\r\n                        <p className=\"savedInput\">{this.props.savedInput}</p>\r\n                    </div>\r\n\r\n                    {/* display the user's misspelled or incorrectly used words */}\r\n                    <p className=\"errorMessage\">Error(s) found:</p>\r\n                    <ol>\r\n                        {this.props.wrongWord.map((word, index) =>{\r\n                            return(\r\n                                <li key={index} className=\"wrongWordListItem\">{word}</li>\r\n                            )\r\n                        })}\r\n                    </ol>\r\n                    {/* map over the array resulting from the axios call in order to find the error messages */}\r\n                    <ul className=\"errorMessages\">{this.props.edits.map((errorMessages, index) =>{\r\n                        return(\r\n                            <li key={index}>\r\n                                {/* display the error message(s) on the page */}\r\n                                <p className=\"message\">{errorMessages.message}</p>\r\n                            </li>\r\n                        ) \r\n                        })}\r\n                    </ul>  \r\n                </div>\r\n            )\r\n            // if the resulting array has a length of less than 0, meaning it doesn't return any messages, print a message to the user\r\n        } else {\r\n            return(\r\n                <div>\r\n                    {/* error handling messages if necessary */}\r\n                    <p className=\"errorHandling\">{this.characterCountMessage()}</p>\r\n                </div> \r\n            )\r\n        } \r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\nimport './styles/App.scss';\nimport axios from 'axios';\nimport Qs from 'qs';\nimport GrammarForm from './GrammarForm';\nimport ResetButton from './ResetButton';\nimport RemovableDiv from './RemovableDiv'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      inputField: '',\n      userInput: '',\n      savedInput: '',\n      edits: [],\n      charsLeft: 50000,\n      newEditState: '',\n      wrongWord:'',\n    }\n  }\n\n  //axios call\n  checkMyGrammar = () => {\n    axios ({\n      method: 'GET',\n      url: 'https://proxy.hackeryou.com',\n      dataResponse: 'JSON',\n      paramsSerializer: function(params) {\n        return Qs.stringify(params, {arrayFormat: 'brackets'})\n      },\n      params: {\n        reqUrl: 'http://api.grammarbot.io/v2/check',\n        params: {\n            queryParam: this.state.userInput,\n            key: 'KS9C5N3Y',\n            format: 'JSON',\n            text: this.state.userInput,\n            language: 'en-CA',\n        }, \n        proxyHeaders: {\n          'header_params': 'value',\n        },\n        xmlToJSON: false,\n      } \n    }).then((results) => {\n      this.setState({\n        edits: results.data.matches,\n        wrongWord: results.data.matches.map((misspelling) => {  \n          return this.state.userInput.slice(misspelling.context.offset, misspelling.context.offset + misspelling.context.length)\n        })\n      })\n    }).then(() => {\n        if (this.state.edits.length <= 0) {\n          this.setState({\n            newEditState: `Your sentence didn't contain any errors. Great job!`,\n          })\n        } else if (this.state.edits.length > 0){\n          this.setState({\n            newEditState: '',\n          })\n        }\n    }).then(() =>{\n       if(this.state.inputField !== '')\n       this.setState({\n         newEditState: '',\n       })\n    })\n  }\n\n\n  //when the user types in the form\n  handleChange = (event) => {\n    const charCount = event.target.value.length;\n    const charLeft = 50000 - charCount;\n    this.setState({\n      inputField: event.target.value,\n      userInput: event.target.value,\n      charsLeft: charLeft,\n    }) \n    if (this.state.inputField !== ''){\n      this.setState({\n        newEditState: '',\n      })\n    }\n  }\n\n//when the user clicks the submit button\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState({\n      savedInput: this.state.inputField,\n      inputField: '',\n    })\n    if (this.state.charsLeft <= 49975){\n      this.checkMyGrammar();\n    }\n  }\n\n  \n  //functions for the reset button\n\n  reset(){\n    this.setState({\n      inputField: '',\n      userInput: '',\n      edits: [],\n      savedInput: '',\n      wrongWords: '',\n      newEditState: '',\n    })\n  }\n  \n  handleReset = (event) => {\n    event.preventDefault();\n    this.reset();\n  }\n\n  \n  render(){\n    return (\n      <div className=\"App\">\n          <div className=\"wrapper\">\n            <header>\n              <h1>Grammarist</h1>\n              <h2>Let me tell you what <span>you're</span> your problem is!</h2>\n              <p>Type a sentence below.</p>\n              <div className=\"perfectSentence\">\n                <p>{this.state.newEditState}</p>\n              </div>\n            </header>\n\n            <main>\n              {/* render the information to the page */}\n              <RemovableDiv savedInput={this.state.savedInput} edits={this.state.edits} newEditState={this.state.newEditState} charsLeft={this.state.charsLeft} wrongWord={this.state.wrongWord} />\n              \n              {/* run the axios call in the form component upon submit */}\n              <GrammarForm run={this.checkMyGrammar} handleChange = {this.handleChange} handleSubmit={this.handleSubmit} inputField={this.state.inputField} charsLeft={this.state.charsLeft} userInput={this.state.userInput} handleReset={this.onButtonClick}/>\n  \n              {/* reset the form when button is clicked */}\n              <ResetButton handleReset={this.handleReset} />\n            </main>\n          </div>\n          <footer>\n            <p>&copy; 2019 Jessica Chin. Grammar by GrammarBot.</p>\n          </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}